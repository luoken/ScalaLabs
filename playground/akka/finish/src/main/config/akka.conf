####################
# Akka Config File #
####################

akka {
  version = "1.1"   # Akka version, checked against the runtime version of Akka.

  enabled-modules = ["remote", "camel", "http"]       # Comma separated list of the enabled modules. Options: ["remote", "camel", "http"]

  time-unit = "seconds"      # Time unit for all timeout properties throughout the config

  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  event-handler-level = "INFO" # Options: ERROR, WARNING, INFO, DEBUG

  # These boot classes are loaded (and created) automatically when the Akka Microkernel boots up
  #     Can be used to bootstrap your application(s)
  #     Should be the FQN (Fully Qualified Name) of the boot class which needs to have a default constructor
  # boot = ["sample.camel.Boot",
  #         "sample.rest.java.Boot",
  #         "sample.rest.scala.Boot",
  #         "sample.security.Boot"]
  boot = ["duse12.Boot"]


  http {
    hostname = "localhost"
    port = 9998

    #If you are using akka.http.AkkaRestServlet
    filters = ["akka.security.AkkaSecurityFilterFactory"] # List with all jersey filters to use
    # resource-packages = ["sample.rest.scala",
    #                      "sample.rest.java",
    #                      "sample.security"] # List with all resource packages for your Jersey services
    resource-packages = []

    # The authentication service to use. Need to be overridden (sample now)
    # authenticator = "sample.security.BasicAuthenticationService"
    authenticator = "N/A"

    # Uncomment if you are using the KerberosAuthenticationActor
    # kerberos {
    #   servicePrincipal = "HTTP/localhost@EXAMPLE.COM"
    #   keyTabLocation   = "URL to keytab"
    #   kerberosDebug    = "true"
    #   realm            = "EXAMPLE.COM"
    # }
    kerberos {
      servicePrincipal = "N/A"
      keyTabLocation   = "N/A"
      kerberosDebug    = "N/A"
      realm            = ""
    }

    #If you are using akka.http.AkkaMistServlet
    mist-dispatcher {
      #type = "GlobalExecutorBasedEventDriven" # Uncomment if you want to use a different dispatcher than the default one for Comet
    }
    connection-close = true                 # toggles the addition of the "Connection" response header with a "close" value
    root-actor-id = "_httproot"             # the id of the actor to use as the root endpoint
    root-actor-builtin = true               # toggles the use of the built-in root endpoint base class
    timeout = 1000                          # the default timeout for all async requests (in ms)
    expired-header-name = "Async-Timeout"   # the name of the response header to use when an async request expires
    expired-header-value = "expired"        # the value of the response header to use when an async request expires
  }

  remote {

    # secure-cookie = "050E0A0D0D06010A00000900040D060F0C09060B" # generate your own with '$AKKA_HOME/scripts/generate_config_with_secure_cookie.sh' or using 'Crypt.generateSecureCookie'
    secure-cookie = ""

    compression-scheme = "zlib" # Options: "zlib" (lzf to come), leave out for no compression
    zlib-compression-level = 6  # Options: 0-9 (1 being fastest and 9 being the most compressed), default is 6

    layer = "akka.remote.netty.NettyRemoteSupport"

    server {
      hostname = "localhost"       # The hostname or IP that clients should connect to
      port = 2552                  # The port clients should connect to. Default is 2552 (AKKA)
      message-frame-size = 1048576 # Increase this if you want to be able to send messages with large payloads
      connection-timeout = 1
      require-cookie = off         # Should the remote server require that it peers share the same secure-cookie (defined in the 'remote' section)?
      untrusted-mode = off         # Enable untrusted mode for full security of server managed actors, allows untrusted clients to connect.
      backlog = 4096               # Sets the size of the connection backlog
      execution-pool-keepalive = 60# Length in akka.time-unit how long core threads will be kept alive if idling
      execution-pool-size      = 16# Size of the core pool of the remote execution unit
      max-channel-memory-size  = 0 # Maximum channel size, 0 for off
      max-total-memory-size    = 0 # Maximum total size of all channels, 0 for off
    }

    client {
      buffering {
        retry-message-send-on-failure = on
        capacity = -1                      # If negative (or zero) then an unbounded mailbox is used (default)
                                           # If positive then a bounded mailbox is used and the capacity is set using the property
      }
      reconnect-delay = 5
      read-timeout = 10
      message-frame-size = 1048576
      reap-futures-delay = 5
      reconnection-time-window = 600 # Maximum time window that a client should try to reconnect for
    }
  }
}
